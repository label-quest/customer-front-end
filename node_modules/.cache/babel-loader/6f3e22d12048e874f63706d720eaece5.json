{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport prefixName from './util/prefixName';\n\nvar createValues = function createValues(_ref) {\n  var getIn = _ref.getIn;\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var valuesMap = void 0;\n\n    if (typeof args[0] === 'string') {\n      valuesMap = args.map(function (k) {\n        return {\n          prop: k,\n          path: k\n        };\n      });\n    } else {\n      var config = args[0];\n      valuesMap = Object.keys(config).map(function (k) {\n        return {\n          prop: k,\n          path: config[k]\n        };\n      });\n    }\n\n    if (!valuesMap.length) {\n      throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...})');\n    } // create a class that reads current form name and creates a selector\n    // return\n\n\n    return function (Component) {\n      var FormValues = function (_React$Component) {\n        _inherits(FormValues, _React$Component);\n\n        function FormValues(props, context) {\n          _classCallCheck(this, FormValues);\n\n          var _this = _possibleConstructorReturn(this, (FormValues.__proto__ || Object.getPrototypeOf(FormValues)).call(this, props, context));\n\n          if (!context._reduxForm) {\n            throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');\n          }\n\n          var getValues = context._reduxForm.getValues;\n\n          var formValuesSelector = function formValuesSelector(_) {\n            // Yes, we're only using connect() for listening to updates\n            var props = {};\n            var values = getValues();\n            valuesMap.forEach(function (_ref2) {\n              var prop = _ref2.prop,\n                  path = _ref2.path;\n              return props[prop] = getIn(values, prefixName(context, path));\n            });\n            return props;\n          };\n\n          _this.Component = connect(formValuesSelector, function () {\n            return {};\n          } // ignore dispatch\n          )(Component);\n          return _this;\n        }\n\n        _createClass(FormValues, [{\n          key: 'render',\n          value: function render() {\n            return React.createElement(this.Component, this.props);\n          }\n        }]);\n\n        return FormValues;\n      }(React.Component);\n\n      FormValues.contextTypes = {\n        _reduxForm: PropTypes.object\n      };\n      return FormValues;\n    };\n  };\n};\n\nexport default createValues;","map":null,"metadata":{},"sourceType":"module"}